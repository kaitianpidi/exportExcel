package com.compass.attendanceService;

import com.compass.dao.AttUserMapper;
import com.compass.dao.RestPageMapper;
import com.compass.dao.WorkHoursSumMapper;
import com.compass.dao.WorkPageMapper;
import com.compass.model.DepartmentGroupUser;
import com.compass.model.RestRecord;
import com.compass.model.WorkRecord;
import com.compass.vo.AttendanceExportExcel;
import com.compass.vo.ResponseMessage;
import com.compass.vo.TablePage;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.text.SimpleDateFormat;
import java.util.*;

@Service
@Slf4j
public class AttendanceExportServer {
    @Resource
    WorkHoursSumMapper workHoursSumMapper;
    @Resource
    AttUserMapper attUserMapper;
    @Resource
    WorkPageMapper workPageMapper;
    @Resource
    RestPageMapper restPageMapper;


    public ResponseMessage getAttDateListGivePage(WorkRecord workRecord) {
        if(workRecord.getCheckStartDate() == null || workRecord.getCheckStartDate().isEmpty() || workRecord.getCheckStartDate().equals("")){
            return ResponseMessage.errorResponse("请选择开始时间");
        }
        if(workRecord.getCheckEndDate() == null || workRecord.getCheckEndDate().isEmpty() || workRecord.getCheckEndDate().equals("")){
            return ResponseMessage.errorResponse("请选择结束时间");
        }
        String checkStartDate = workRecord.getCheckStartDate();
        String checkEndDate = workRecord.getCheckEndDate();
        String startMonth = checkStartDate.substring(0, checkStartDate.lastIndexOf("-"));
        String endMonth = checkEndDate.substring(0, checkEndDate.lastIndexOf("-"));
        if(!(startMonth.equals(endMonth))){
            return ResponseMessage.errorResponse("不能查询或导出跨月考勤数据");
        }
//        workRecord.setWorkMonth(startMonth);
        try {
           /* Page page_1 = PageHelper.startPage(workRecord.getPageNum(), workRecord.getPageSize(), true);
            List<AttendanceExportExcel> attendanceExportExcelList = this.getExportAttendanceList(workRecord);
            Long total_1 = page_1.getTotal();
            TablePage tablePage_1 = new TablePage();
            tablePage_1.setTotal(total_1);
            tablePage_1.setRows(attendanceExportExcelList);

            return ResponseMessage.successResponse(tablePage_1);*/

            Integer pageNum = workRecord.getPageNum();
            Integer pageSize = workRecord.getPageSize();
            List<AttendanceExportExcel> attendanceList = this.getExportAttendanceList(workRecord);
            TablePage tablePage = new TablePage();
            tablePage.setTotal((long)(attendanceList.size()));

            int startP = (pageNum-1)*pageSize; //起始位置
            int endP = startP + pageSize;  //结束位置
            //获取返回的数据
            List<AttendanceExportExcel> data  = new ArrayList<>();
            if(endP >= attendanceList.size()) endP = attendanceList.size();
            for (int i=startP;i< endP;i++){
                data.add(attendanceList.get(i));
            }
            tablePage.setRows(data);
            return ResponseMessage.successResponse(tablePage);
        } catch (Exception e) {
            log.error("获取数据失败，{}", e.getMessage(), e);
            return ResponseMessage.errorResponse("获取数据失败");
        }
    }



    /**
     * 获取数据， 并把原来的对象， 转换成 WorkRecordExcel对象，放到新的list中。
     *
     * @param workRecord
     * @return
     */
    public List<AttendanceExportExcel> getExportAttendanceList(WorkRecord workRecord) {
        ArrayList<AttendanceExportExcel> aList = new ArrayList<>();

//        //2.2 本月的起始、结束日期
//        String workMonth = workRecord.getWorkMonth();
//        if (workMonth == null) return aList;

//        String checkStartDate = workMonth + "-01";  //设置每月第1天
//        String checkEndDate = this.getLastDayForMonth(workMonth);  //设置每月最后1天
        //3.获取上班记录列表
        List<String> workRecordUserList = this.getAttUserList(workRecord);//获取员工名称

        List<WorkRecord> workList = workPageMapper.getWorkRecordAndHoursSumListByDate_1(workRecordUserList, workRecord.getCheckStartDate(), workRecord.getCheckEndDate(), workRecord.getWorkMonth());

        //4.获取休息记录列表
        List<RestRecord> restList = restPageMapper.getRestRecordListByDate_1(workRecordUserList, workRecord.getCheckStartDate(), workRecord.getCheckEndDate());
        //1）work和rest 都没有数据
        if (workList.size() == 0 && restList.size() == 0) {
            return null;
        }
        else if(workList.size() == 0 && restList.size() > 0){
            //2) 只有rest中有数据
            for(int i =0;i<restList.size();i++){
                AttendanceExportExcel attendanceRecordExcel = new AttendanceExportExcel();
                attendanceRecordExcel.setId(i+1);
                attendanceRecordExcel.setUserName(restList.get(i).getUserName());
                attendanceRecordExcel.setWorkDate(restList.get(i).getRestDate());
                attendanceRecordExcel.setUpWorkTime("休假");
                attendanceRecordExcel.setOffWorkTime("休假");
                attendanceRecordExcel.setWorkHours(0.00);
                attendanceRecordExcel.setWorkHoursSum(0.00);
                aList.add(attendanceRecordExcel);
            }
            return aList;
        }else {
            //3) work不为空，进行遍历。
            //5.合并以上2个list，生成导出对象，放入新的list
            int restSize = restList.size();
            int restNum = 0;  //休息列表的索引
            Integer sn = 0;    //序号
            WorkRecord curWork = workList.get(0);  //当前正在遍历的用户
            String curName = workList.get(0).getUserName();  //当前正在遍历的用户

            for (int i = 0; i < workList.size(); i++) {
                WorkRecord wRecord = workList.get(i);

                if(restNum == restSize){  //rest信息已遍历完，保存剩余的work信息。
                    saveLastWork(wRecord,aList);
                    continue;//继续下一个值。
                }
                if (curName.equals(wRecord.getUserName())) {  //是同一个员工，则继续比较
                    restNum = handlerCompare(wRecord, aList, restList, restSize, restNum, curName);

                } else {
                    restNum = doLastRest(aList, curWork, restList, restNum, curName);

                    curName = wRecord.getUserName(); //保存当前用户
                    restNum = handlerCompare(wRecord, aList, restList, restSize, restNum, curName);  //继续执行
                }
            }
            //如果 rest信息未执行完，则继续剩下的。
            if (restNum < restList.size()) {
                restNum = doLastRest(aList, workList.get(workList.size() - 1), restList, restNum, curName);
            }
            return aList;
        }
    }



    //当前员工，work信息遍历完，只剩rest信息。
    private int doLastRest(ArrayList<AttendanceExportExcel> aList, WorkRecord curWork, List<RestRecord> restList, int restNum, String curName) {
        while (restNum < restList.size() && curName.equals(restList.get(restNum).getUserName())) { // 该员工的work信息遍历完， 保存剩余的 rest信息
            AttendanceExportExcel attendanceExcel = new AttendanceExportExcel();
            RestRecord restRecord = restList.get(restNum);
            attendanceExcel.setWorkDate(restRecord.getRestDate());
            attendanceExcel.setUpWorkTime("休假");
            attendanceExcel.setOffWorkTime("休假");
            attendanceExcel.setWorkHours(0.0);
            attendanceExcel.setUserName(curName);
            attendanceExcel.setWorkHoursSum(curWork.getWorkHoursSum());
            attendanceExcel.setId(aList.size() + 1);
            aList.add(attendanceExcel);

            ++restNum;  //取下一个值
        }
        return restNum;
    }

    private int handlerCompare(WorkRecord workRecord, ArrayList<AttendanceExportExcel> aList, List<RestRecord> restList, int restSize, int restNum, String curName) {
        RestRecord rRecord = getRestRecord(curName, restList, restNum);  //获取 休息记录
        if(rRecord == null){ //该用户没有休息记录，则不需比较，直接保存work记录。
            saveLastWork(workRecord, aList);
        }
        if (restNum < restSize) {
            while (rRecord != null) {
                boolean b = compareAndSave(workRecord, rRecord, aList);
                if (b) {
                    break;  // 跳出while， wordRecord ，取下一个值
                } else {
                    rRecord = getRestRecord(curName, restList, ++restNum);  //restRecord ，取下一个值
                    if (rRecord == null) {  //当前curName 没有休息记录，则保存与它比较 work记录
                        saveLastWork(workRecord, aList);
                    }
                }
            }

        } else {  // 所有员工都没有休息记录，不用rRecord和比较，直接保存workRecord
            saveLastWork(workRecord, aList);
        }
        return restNum;
    }

    private void saveLastWork(WorkRecord workRecord, ArrayList<AttendanceExportExcel> aList) {
        AttendanceExportExcel attendanceExcel = new AttendanceExportExcel();
        attendanceExcel.setWorkDate(workRecord.getWorkDate());
        attendanceExcel.setUpWorkTime(getTimeByDateTime(workRecord.getUpWorkTime()));
        attendanceExcel.setOffWorkTime(getTimeByDateTime(workRecord.getOffWorkTime()));
        attendanceExcel.setWorkHours(workRecord.getWorkHours());
        attendanceExcel.setUserName(workRecord.getUserName());
        attendanceExcel.setWorkHoursSum(workRecord.getWorkHoursSum());
        attendanceExcel.setId(aList.size() + 1);
        aList.add(attendanceExcel);

    }

    /**
     * @param workRecord
     * @param restRecord
     * @param aList
     * @return true: workRecord 值保存到list，    false:  restRecord 保存到list
     */
    private boolean compareAndSave(WorkRecord workRecord, RestRecord restRecord, ArrayList<AttendanceExportExcel> aList) {
        AttendanceExportExcel attendanceExcel = new AttendanceExportExcel();
        String s1 = workRecord.getWorkDate();
        String s2 = restRecord.getRestDate();
        int result = s1.compareTo(s2);

        if (result < 0) {  //存放work记录
            attendanceExcel.setWorkDate(s1);
            attendanceExcel.setUpWorkTime(getTimeByDateTime(workRecord.getUpWorkTime()));
            attendanceExcel.setOffWorkTime(getTimeByDateTime(workRecord.getOffWorkTime()));
            attendanceExcel.setWorkHours(workRecord.getWorkHours());
            attendanceExcel.setId(aList.size() + 1);
            attendanceExcel.setUserName(workRecord.getUserName());
            attendanceExcel.setWorkHoursSum(workRecord.getWorkHoursSum());
            aList.add(attendanceExcel);

            return true;

        } else if (result == 0) {
            if (workRecord.getUpWorkTime() == null) {
                attendanceExcel.setUpWorkTime("休假");
            } else {
                attendanceExcel.setUpWorkTime(getTimeByDateTime(workRecord.getUpWorkTime()));
            }

            if (workRecord.getOffWorkTime() == null) {
                attendanceExcel.setOffWorkTime("休假");
            } else {
                attendanceExcel.setOffWorkTime(getTimeByDateTime(workRecord.getOffWorkTime()));
            }
            attendanceExcel.setWorkHours(workRecord.getWorkHours());
            attendanceExcel.setWorkHours(workRecord.getWorkHours());

        } else {  //存放rest 记录
            attendanceExcel.setWorkDate(s2);
            attendanceExcel.setUpWorkTime("休假");
            attendanceExcel.setOffWorkTime("休假");
            attendanceExcel.setWorkHours(0.0);
        }

        attendanceExcel.setId(aList.size() + 1);
        attendanceExcel.setUserName(workRecord.getUserName());
        attendanceExcel.setWorkHoursSum(workRecord.getWorkHoursSum());
        aList.add(attendanceExcel);

        return false;
    }

    private RestRecord getRestRecord(String curName, List<RestRecord> restList, int restNum) {
        if(restList.size() == 0){
            return null;
        }
        if(restList.size() == restNum){
            return null;
        }
        RestRecord restRecord = restList.get(restNum);
        if (curName.equals(restRecord.getUserName())) {
            return restRecord;
        } else {
            return null;
        }
    }

    public String getTimeByDateTime(String dTime) {
        if(dTime == null || dTime.isEmpty() || dTime.equals("")){
            return "";
        }else {
            String[] s = dTime.split(" ");
            return s[1];
        }
    }

    /**
     * 工作记录 与 休息记录，值小的存入 attendanceExcels
     *
     * @param aRecordExcel
     * @param restList
     * @param wRecord
     * @param i
     * @param aList
     * @param sn
     * @return 返回 restList遍历到位置，以便下次接着该位置遍历
     */
    public int[] compareWorkRest(AttendanceExportExcel aRecordExcel, List<RestRecord> restList, WorkRecord wRecord, int i, ArrayList<AttendanceExportExcel> aList, int sn) {
        String s1 = wRecord.getWorkDate();
        int sn2 = sn;
        int[] arr = new int[2];
        while (i < restList.size()) {
            RestRecord restRecord = restList.get(i);
            if (wRecord.getUserName().equals(restRecord.getUserName())) { //如果相等，是同一个人，再比较日期
                String s2 = restRecord.getRestDate();
                int result = s1.compareTo(s2);
                AttendanceExportExcel attendanceExcel = new AttendanceExportExcel();
                if (result < 0) {  //存放work记录
                    aRecordExcel.setWorkDate(s1);
                    aRecordExcel.setUpWorkTime(getLastDayForMonth(wRecord.getUpWorkTime()));
                    aRecordExcel.setOffWorkTime(getLastDayForMonth(wRecord.getOffWorkTime()));
                    aRecordExcel.setWorkHours(wRecord.getWorkHours());
                    arr[0] = i;
                    arr[1] = sn2;
                    return arr;
                } else if (result == 0) {
                    if (wRecord.getUpWorkTime() == null) {
                        attendanceExcel.setUpWorkTime("休假");
                    } else {
                        attendanceExcel.setUpWorkTime(getLastDayForMonth(wRecord.getUpWorkTime()));
                    }

                    if (wRecord.getOffWorkTime() == null) {
                        attendanceExcel.setOffWorkTime("休假");
                    } else {
                        attendanceExcel.setOffWorkTime(getLastDayForMonth(wRecord.getOffWorkTime()));
                    }
                    attendanceExcel.setWorkHours(wRecord.getWorkHours());
                    i++;  // 执行下一条记录，返回。
                } else {  //存放rest 记录
                    attendanceExcel.setWorkDate(s2);
                    attendanceExcel.setUpWorkTime("休假");
                    attendanceExcel.setOffWorkTime("休假");
                    attendanceExcel.setWorkHours(0.0);

                    i++;  //继续取下一条休息记录，进行比较
                }
                sn2 = sn2 + 1;
                attendanceExcel.setId(sn2);
                attendanceExcel.setUserName(wRecord.getUserName());
                attendanceExcel.setWorkHoursSum(wRecord.getWorkHoursSum());
                aList.add(attendanceExcel);
                arr[0] = i;
                arr[1] = sn2;

            } else { //该员工 在restlist中已遍历完 或者 请假日期在本月的最后。

                return arr;
            }
        }

        return arr;
    }

    //获取月累计工时记录
    public List<WorkRecord> getWorkHoursSumRecordListByMonth(WorkRecord workRecord) {
        if (workRecord.getCheckDepartmentNameNumber() == null && workRecord.getCheckGroupNameNumber() == null && workRecord.getCheckAttUserNameNumber() == null) {
            List<WorkRecord> list = workHoursSumMapper.getWorkHoursSumRecordList(workRecord);
            return list;
        } else {
            List<String> workRecordUserList = this.getAttUserList(workRecord);
            if (workRecordUserList.size() == 0) {
                //没有数据，直接返回
                return new ArrayList<WorkRecord>();
            } else {                                            // 下面workRecord.getCheckStartDate(),workRecord.getCheckEndDate(), 这两个字段没有
                List<WorkRecord> recordList_1 = workHoursSumMapper.getWorkHoursSumRecordList_1(workRecordUserList, workRecord.getCheckStartDate(), workRecord.getCheckEndDate(), workRecord.getWorkMonth());
                return recordList_1;
            }
        }
    }



    public String getLastDayForMonth(String yearMonth) {

        // 获取当月的天数
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        // 定义当前期间的1号的date对象
        Date date = null;
        try {
            date = dateFormat.parse(yearMonth + "-01");
        } catch (Exception e) {
            log.error("出现异常了，{}",e.getMessage(),e);
        }
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(date);
        calendar.add(Calendar.MONTH, 1);//月增加1天
        calendar.add(Calendar.DAY_OF_MONTH, -1);//日期倒数一日,既得到本月最后一天
        Date voucherDate = calendar.getTime();
        return dateFormat.format(voucherDate);
    }



    //获取批量查询的考勤人员名称
    public List<String> getAttUserList(WorkRecord workRecord) {
        DepartmentGroupUser departmentGroupUser = new DepartmentGroupUser();
        departmentGroupUser.setId(workRecord.getCheckAttUserNameNumber());
        departmentGroupUser.setGroupNameNumber(workRecord.getCheckGroupNameNumber());
        departmentGroupUser.setDepartmentNameNumber(workRecord.getCheckDepartmentNameNumber());
        List<String> workRecordUserList = attUserMapper.getAttUserByWorkRecord(departmentGroupUser);
        return workRecordUserList;
    }
}
